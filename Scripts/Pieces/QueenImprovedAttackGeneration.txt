// Online C# Editor for free
// Write, Edit and Run your C# code using C# Online Compiler

using System;
using System.Numerics;

public class Program
{
    public static void Main(string[] args)
    {
        int squareIndex = 36;
        int kingSquareIndex = 63;
        ulong topRightDiagonal = 0;
        int numSquaresToEdgeTopRight = NumSquaresToEdgeFromSquare(squareIndex, 9);
        
        for (int i = 1; i <= numSquaresToEdgeTopRight; i++) {
            topRightDiagonal |= 1ul << (squareIndex + (9 * i));
        }
        
        
        
        ulong whitePieces = 0b0000000000000000000000000000000000000000000000000000000000000000;
        ulong blackPieces = 0b1000000001000000000000000001000000000000000000000000000000000000;
        ulong allPieces = whitePieces | blackPieces;
        /*
            
            10000000
            01000000
            00000000
            00010000
            00000000
            00000000
            00000000
            00000000
            
        */
        
        PrintBitboard(allPieces, 8);
        // return;
        
        
        // topRightDiagonal ^= 1ul << squareIndex;
        
        bool isWhite = false;
        PrintBitboard(topRightDiagonal, 8);
        // PrintBitboard(whitePieces, 8);
        // PrintBitboard(blackPieces, 8);
        
        ulong topRightDiagonalCopy = topRightDiagonal;
        while (topRightDiagonalCopy != 0) {
            int pieceSquareIndex = PopLeastSignificantBit(ref topRightDiagonalCopy);
            ulong pieceSquareMask = 1ul << pieceSquareIndex;
            
            // there's a piece in the way
            if ((allPieces & pieceSquareMask) != 0) {
                Console.WriteLine(pieceSquareIndex);
                
                if (pieceSquareIndex == kingSquareIndex) {
                    Console.WriteLine("King is checked!");
                }
                else if (((isWhite && (blackPieces & pieceSquareMask) != 0) || (!isWhite && (whitePieces & pieceSquareMask) != 0)) && (topRightDiagonal & (1ul << kingSquareIndex)) != 0) {
                    PrintBitboard(topRightDiagonalCopy, 8);
                    while (topRightDiagonalCopy != 0) {
                        int potentialKingPosition = PopLeastSignificantBit(ref topRightDiagonalCopy);
                        Console.WriteLine(potentialKingPosition);
                        if (potentialKingPosition == kingSquareIndex) {
                            Console.WriteLine("piece is pinned");
                            break;
                        }
                        else if (((1ul << potentialKingPosition) & allPieces) != 0) {
                            // piece is not pinned
                            break;
                        }
                    }
                }
                
                ulong fullMask = ulong.MaxValue;
                (_, int y) = ConvertSquareIndexToCoord(pieceSquareIndex);
                fullMask <<= (y + 1) * 8;
                // PrintBitboard(fullMask, 8);
                fullMask = ~fullMask;
                topRightDiagonal &= fullMask;
                break;
            }
        }
        topRightDiagonal |= 1ul << squareIndex;
        PrintBitboard(topRightDiagonal, 8);
    }
    
    public static int NumSquaresToEdgeFromSquare(int squareIdx, int direction) {
        (int xDir, int yDir) = ConvertDirectionToCoord(direction);
        int squareX = squareIdx % 8;
        int squareY = squareIdx / 8;

        int squareToCheckX = squareX + xDir;
        int squareToCheckY = squareY + yDir;
        int numUntilEdge = 0;
        while (squareToCheckX >= 0 && squareToCheckX < 8 && squareToCheckY >= 0 && squareToCheckY < 8) {
            squareToCheckX += xDir;
            squareToCheckY += yDir;
            numUntilEdge++;
        }

        return numUntilEdge;
    }
    
    public static (int, int) ConvertDirectionToCoord(int direction) {
        int unsignedDir = Math.Abs(direction);
        if (unsignedDir == 8 - 1)
            return direction < 0 ? (1, -1) : (-1, 1);
        else if (unsignedDir == 8 + 1)
            return direction < 0 ? (-1, -1) : (1, 1);
        else if (unsignedDir == 8)
            return direction < 0 ? (0, -1) : (0, 1);
        else if (unsignedDir == 1)
            return direction < 0 ? (-1, 0) : (1, 0);
        return (0, 0);
    }
    
    public static (int x, int y) ConvertSquareIndexToCoord(int squareIndex) {
        int x = squareIndex % 8;
        int y = squareIndex / 8;

        return (x, y);
    }
    
    public static void PrintBitboard(ulong bitboard, int dimensions) {
        string bitboardAsString = Convert.ToString((long)bitboard, 2).PadLeft(64, '0');
        for (int i = 0; i < dimensions; i++) {
            string attackedRow = bitboardAsString[(i * dimensions)..((i + 1) * dimensions)];
            string row = $"{dimensions - i} [ ";
            for (int j = attackedRow.Length - 1; j >= 0; j--) {
                row += $"{attackedRow[j]} ";
            }
            row += "]";
            Console.WriteLine(row);
        }
        Console.WriteLine("    A B C D E F G H");
    }
    
    public static int PopLeastSignificantBit(ref ulong value) {
        int squareIndex = BitOperations.TrailingZeroCount(value);
        value &= value - 1;
        return squareIndex;
    }
}